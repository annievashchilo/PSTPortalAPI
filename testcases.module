<?php
/**
 * @file
 * Attaches testcases data fields to Drupal entities.
 */
 
/**
 * Implements of hook_services_resources().
 */
function testcases_services_resources() {
  $myrestapi = array(
    'testcases' => array(
      'operations' => array(
			'retrieve' => array(
				'help' => 'Retrieves test cases',
				'file' => array(
					'type' => 'inc',
					'module' => 'testcases',
					'name' => 'testcases'),
				'callback' => 'testcases_retrieve',
				'access arguments' => array('view'),
				'access arguments append' => FALSE,
				'args' => array(
					array(
					  'name' => 'fn',
					  'type' => 'string',
					  'description' => 'Function to perform',
					  'source' => array('path' => '0'),
					  'optional' => TRUE,
					  'default' => '0',
					),
					array(
					  'name' => 'scenario',
					  'type' => 'string',
					  'description' => 'Scenario, which owns test cases',
					  'source' => array('param' => 'scenario'),
					  'optional' => FALSE,
					  'default' => '*',
					),
				),
			),
			'update' => array(
				'help' => 'Update testcases',
				'file' => array('type' => 'inc', 'module' => 'testcases', 'name' => 'testcases'),
				'callback' => 'testcases_update',
				'access callback' => 'testcases_access',
				'access arguments' => array('update'),
				'access arguments append' => TRUE,	
				'args' => array(
					array(
						'name' => 'fn',
						'type' => 'string',
						'description' => 'Function to perform',
						'source' => array('path' => '0'),
						'optional' => TRUE,
						'default' => '0',
					),
					array(
						'name' => 'customer',
						'type' => 'string',
						'description' => 'Project name, that testsuite belongs to',
						'source' => array('param' => 'customer'),
						'optional' => FALSE,
					),
					array(
						'name' => 'data',
						'type' => 'struct',
						'description' => 'The testcase data object',
						'source' => 'data',
						'optional' => FALSE,
					),
				),				
			),
			'create' => array(
			   'help' => 'Creates a json file with updated testcases',
			   'file' => array('type' => 'inc', 'module' => 'testcases', 'name' => 'testcases'),
			   'callback' => 'testcases_create',
			   'access callback' => 'testcases_access',
			   'access arguments' => array('create'),
			   'access arguments append' => FALSE,
			   'args' => array(
					array(
						'name' => 'fn',
						'type' => 'string',
						'description' => 'Function to perform',
						'source' => array('path' => '0'),
						'optional' => TRUE,
						'default' => '0',
					),
					array(
						'name' => 'customer',
						'type' => 'string',
						'description' => 'Project name, that testsuite belongs to',
						'source' => array('param' => 'customer'),
						'optional' => FALSE,
					),
					array(
						'name' => 'data',
						'type' => 'struct',
						'description' => 'The testcase data object',
						'source' => array('param' => 'data'),
						'optional' => FALSE,
					),
				),
			 ),
		),
    ),
  );
  return

$myrestapi;
}
	/**
     * Implements hook_perm().
     */
function testcases_perm() {
      return array(
        'testcases resource create',
        'testcases resource view any testcase',
        'testcases resource view own testcase',
        'testcases resource edit any testcase',
        'testcases resource edit own testcase',
      );
}

	/**
     * Access callback for the testcases resource.
     *
     * @param string $op
     *  The operation that's going to be performed.
     * @param array $args
     *  The arguments that will be passed to the callback.
     * @return bool
     *  Whether access is given or not.
     */
function testcases_access($op, $args) {
      global $user;
      $access = FALSE;

      switch ($op) {
        case 'view':
          $access = user_access('testcases resource view any testcase');
          $access = $access || $testcase->uid == $user->uid && user_access('testcase resource view own testcases');
          break;
        case 'update':
          $access = user_access('testcases resource edit any testcase');
          $access = $access || $testcase->uid == $user->uid && user_access('note resource edit own testcases');
          break;
	  case 'create':
          $access = user_access('testcases resource edit any testcase');
          $access = $access || $testcase->uid == $user->uid && user_access('note resource edit own testcases');
          break;
      }

      return $access;
    }

	/**
	* connect 'our' api to ctools
	*/
function _testcases_ctools_plugin_api($owner, $api) {
  if ($owner == 'services' && $api == 'services') {
    return array(
      'version' => 3,
      'file' => 'testcases.inc', // Optional parameter to indicate the file name to load.
      'path' => drupal_get_path('module', 'testcases') . '/includes', // If specifying the file key, path is required.
    );
  }
}


	/**
	* function to define endpoint for services
	*/
function _testcases_default_services_endpoint() {
      $endpoints = array();

      $endpoint = new stdClass;
      $endpoint->disabled = FALSE; /* Edit this to true to make a default endpoint disabled initially */
      $endpoint->name = 'testcases';
      $endpoint->title = 'Testcases API';
      $endpoint->server = 'myrestapi';
      $endpoint->path = 'myrestapi/testcases';
      $endpoint->authentication = array();
      $endpoint->resources = array(
        'testcases' => array(
          'alias' => 'content',
          'operations' => array(
			'retrieve' => array(
			  'enabled' => 1,
			),
			'update' => array(
			  'enabled' => 1,
			),
			'create' => array(
			  'enabled' => 1,
			),
          ),
        ),
      );
      $endpoints[] = $endpoint;

      return $endpoints;
}